<?php

/**
 * Implementation of hook_menu().
 */
function less_blocks_menu() {

  $items['admin/settings/less-blocks'] = array(
    'title' => 'Less blocks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('less_blocks_settings_form'),
    'access arguments' => array('administer less blocks'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/build/block/less-blocks'] = array(
    'title' => 'Less blocks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('less_blocks_settings_form'),
    'access arguments' => array('administer less blocks'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function less_blocks_perm() {
  return array('administer less blocks');
}

/**
 * Settings form callback
 */
function less_blocks_settings_form() {
  $form['help'] = array(
    '#value' => t('Configure which blocks should be hidden from the block list.'),
    '#weight' => -1,
  );

  $global_options = array(
    'system' => t('Hide all system blocks'),
    'views' => t('Hide all view blocks'),
    'user' => t('Hide all user blocks'),
    'menu' => t('Hide all menu blocks'),
  );

  $form['global'] = array(
    '#type' => 'fieldset',
    '#title' => t('Global block settings'),
    '#collapsible' => FALSE,
    '#weight' => 0
  );

  $form['global']['less_blocks_global_options'] = array(
    '#type' => 'checkboxes',
    '#options' => $global_options,
    '#default_value' => variable_get('less_blocks_global_options', array()),
  );

  $form['specific'] = array(
    '#type' => 'fieldset',
    '#title' => t('Per block settings'),
    '#collapsible' => FALSE,
    '#weight' => 1
  );

  $block_info = array();
  foreach (module_implements('block') as $module) {
    $module_blocks = module_invoke($module, 'block', 'list');
    if ($module_blocks) {
      foreach ($module_blocks as $delta => $info) {
        $info['module'] = $module;
        $block_info["{$module}_{$delta}"] = $info;
      }
    }
  }
  $usability_options = variable_get('less_blocks_usability_options', array());
  $options = array();
  foreach ($block_info as $bid => $info) {
    $options[$bid] = '';
    if ($usability_options['friendly']) {
      $name = _less_blocks_sanitize_block_name($info['info'], $info['module']);
    }
    else {
      $name = check_plain($info['info']);
    }
    $form[$bid]['name'] = array('#value' => $name);
    $form[$bid]['edit'] = array('#value' => l(t('Edit'), 'admin/build/block/configure/'. $bid));
  }

  $form['less_blocks_keys'] = array(
    '#type' => 'checkboxes',
    '#options' => $options,
    '#default_value' => variable_get('less_blocks_keys', array()),
  );

  $usability_options = array(
    'friendly' => t('Give blocks a friendly name'),
    'group' => t('Group the blocks by module'),
  );

  $form['usability'] = array(
    '#type' => 'fieldset',
    '#title' => t('Usability settings'),
    '#description' => t('With these settings you can make it easier to use the block interface.'),
    '#collapsible' => FALSE,
    '#weight' => 3
  );

  $form['usability']['less_blocks_usability_options'] = array(
    '#type' => 'checkboxes',
    '#options' => $usability_options,
    '#default_value' => variable_get('less_blocks_usability_options', array()),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 4
  );
  $form['cancel'] = array(
    '#type' => 'markup',
    '#value' => l(t('Cancel'), 'admin/build/block'),
    '#weight' => 5
  );

  return $form;
}

function less_blocks_settings_form_submit($form_id, $form_state) {
  variable_set('less_blocks_keys', $form_state['values']['less_blocks_keys']);
  variable_set('less_blocks_global_options', $form_state['values']['less_blocks_global_options']);
  variable_set('less_blocks_usability_options', $form_state['values']['less_blocks_usability_options']);
  drupal_set_message(t('Less blocks settings are saved.'));
}

/**
 * Implementation of hook_form_alter()
 */
function less_blocks_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id === 'block_admin_display_form') {

    // Specific keys
    $keys = variable_get('less_blocks_keys', array());
    if (count($keys)) {
      foreach ($keys as $key) {
        unset($form[$key]);
      }
    }
  

    $global_options = variable_get('less_blocks_global_options', array());
    $usability_options = variable_get('less_blocks_usability_options', array());

    foreach ($form as $key => $value) {

      if (is_array($value) && isset($value['module'])) {

        $module = $value['module']['#value'];

        if ($global_options[$module]) {
          unset($form[$key]);
        }

        if ($usability_options['friendly']) {
          $form[$key]['info']['#value'] = _less_blocks_sanitize_block_name($value['info']['#value'], $module);
        }

      }
      if ($usability_options['group']) {
        ksort($form);
      }
    }
  }
}

/**
 * Implementation of hook_theme().
 */
function less_blocks_theme() {
  return array(
    'less_blocks_settings_form' => array(
      'arguments' => array('form' => NULL)
     ),
  );
}

/**
 * Theme callback for the settings form.
 */
function theme_less_blocks_settings_form($form) {
  $rows = array();

  foreach (element_children($form) as $key) {
    $row = array();
    if (isset($form[$key]['name'])) {
      $checkbox = drupal_render($form['less_blocks_keys'][$key]);
      $row[] = array('data' => $checkbox, 'class' => 'checkbox');
      $row[] = drupal_render($form[$key]['name']);
      $row[] = drupal_render($form[$key]['edit']);
      $rows[] = $row;
    }
  }

  $header = array();
  $header[] = array('data' => t('Hidden'),  'class' => 'checkbox');
  $header[] = array('data' => t('Block name'));
  $header[] = array('data' => t('Actions'));

  $output = drupal_render($form['help']);
  $form['specific']['#children'] = theme('table', $header, $rows);
  //$output .= theme('table', $header, $rows);
  $output .= drupal_render($form);
  return $output;
}

/**
 * This function sanitizes the block names.
 */
function _less_blocks_sanitize_block_name($value, $type) {
  switch ($type) {
    case 'views':
      return t('View') .' '. strstr($value, ':');
      break;    
    default: return ucfirst(check_plain($type)) .' : '. $value;
  }
}